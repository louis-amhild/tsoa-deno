// WARNING: This file was auto-generated with tsoa for jsdom. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
{{#if canImportByAlias}}
import {
  Controller,
  fetchMiddlewares,
  FieldErrors,
  File as TsoaFile,
  HonoTemplateService,
  HonoMiddleware,
  Context,
  Next,
  TsoaRoute,
  ValidationService,
  ValidateError,
} from '@tsoa/runtime';

import { Buffer } from "@buffer";
import { Readable } from 'https://deno.land/x/readable_stream@v3.6.0-deno.0.3.0/mod.ts';

{{else}}
  import { Controller, ValidationService, FieldErrors, ValidateError, TsoaRoute, TsoaResponse, HttpStatusCodeLiteral } from '../../../src';
{{/if}}

{{#each controllers}}
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
import { {{name}} } from '{{modulePath}}.ts';
{{/each}}
{{#if authenticationModule}}
import { honoAuthentication } from '{{authenticationModule}}.ts';
{{/if}}
{{#if iocModule}}
import { iocContainer } from '{{iocModule}}.ts';
import { IocContainer, IocContainerFactory } from '@tsoa_runtime';
{{/if}}
import { Hono, Context as HonoContext, HTTPException } from '@hono';

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

const models: TsoaRoute.Models = {
    {{#each models}}
    '{{@key}}': {
        {{#if enums}}
        dataType: 'refEnum',
        enums: {{{json enums}}},
        {{/if}}
        {{#if properties}}
        dataType: 'refObject',
        properties: {
            {{#each properties}}
            '{{@key}}': {{{json this}}},
            {{/each}}
        },
        additionalProperties: {{{json additionalProperties}}},
        {{/if}}
        {{#if type}}
        dataType: 'refAlias',
        type: {{{json type}}},
        {{/if}}
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    {{/each}}
};
const validationService = new ValidationService(models);
const templateService = new HonoTemplateService(models, {{{ json minimalSwaggerConfig }}});

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

export function RegisterRoutes<T extends Hono>(router: T) {
    // ###########################################################################################################
    //  NOTE: If you do not see routes for all of your controllers in this file, then you might not have informed tsoa of where to look
    //      Please look into the "controllerPathGlobs" config option described in the readme: https://github.com/lukeautry/tsoa
    // ###########################################################################################################

    return router
    {{#each controllers}}
    {{#each actions}}
        .{{#if (eq method "head")}}get{{else}}{{method}}{{/if}}('{{fullPath}}', async (honoCtx: HonoContext, next: any) => {
            const context = await templateService.getTsoaCompatContext(honoCtx);

            const handlers = [
              {{#if security.length}}
                authenticateMiddleware({{json security}}),
              {{/if}}
              {{#if uploadFile}}
                (context: Context, next: Next) => templateService.fileUploadMiddleware(next, context as any, {{json uploadFileName}}),
              {{/if}}
              {{#if uploadFiles}}
                (context: Context, next: Next) => templateService.fileUploadMiddleware(next, context as any, [ {"name" : "{{uploadFilesName}}"} ] ),
              {{/if}}
                ...(fetchMiddlewares<HonoMiddleware>({{../name}})),
                ...(fetchMiddlewares<HonoMiddleware>({{../name}}.prototype.{{name}})),
               async (context: Context, next: Next) => {

                const args: Record<string, TsoaRoute.ParameterSchema> = {
                    {{#each parameters}}
                        {{@key}}: {{{json this}}},
                    {{/each}}
                };

                let validatedArgs: any[] = [];
                try {
                  validatedArgs = templateService.getValidatedArgs({args, context, next});
                } catch (err: any) {
                  if (err instanceof ValidateError) {
                    return context.json({ fields: err.fields }, err.status || 400);
                  }

                  return context.json({
                    message: err.message,
                    cause: err.cause,
                  });
                }

                {{#if ../../iocModule}}
                const container: IocContainer = typeof iocContainer === 'function' ? (iocContainer as IocContainerFactory)(context.request) : iocContainer;

                const controller: any = await container.get<{{../name}}>({{../name}});
                if (typeof controller['setStatus'] === 'function') {
                    controller.setStatus(undefined);
                }
                {{else}}
                const controller = new {{../name}}();
                {{/if}}

                return templateService.apiHandler({
                  methodName: '{{name}}',
                  controller,
                  context,
                  validatedArgs,
                  successStatus: {{successStatus}},
                });
              },
            ];
            return templateService.runHandlers(context, handlers);
        }){{/each}}{{/each}}
}

{{#if useSecurity}}

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

function authenticateMiddleware(security: TsoaRoute.Security[] = []) {
    return async function runAuthenticationMiddleware(context: any, next: any) {

        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

        // keep track of failed auth attempts so we can hand back the most
        // recent one.  This behavior was previously existing so preserving it
        // here
        const failedAttempts: any[] = [];
        const pushAndRethrow = (error: any) => {
            failedAttempts.push(error);
            throw error;
        };

        const secMethodOrPromises: Promise<any>[] = [];
        for (const secMethod of security) {
            if (Object.keys(secMethod).length > 1) {
                const secMethodAndPromises: Promise<any>[] = [];

                for (const name in secMethod) {
                    secMethodAndPromises.push(
                        honoAuthentication(context.req, name, secMethod[name])
                            .catch(pushAndRethrow)
                    );
                }

                secMethodOrPromises.push(Promise.all(secMethodAndPromises)
                    .then(users => { return users[0]; }));
            } else {
                for (const name in secMethod) {
                    secMethodOrPromises.push(
                        honoAuthentication(context.req, name, secMethod[name])
                            .catch(pushAndRethrow)
                    );
                }
            }
        }

        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

        let success;
        try {
            const user = await Promise.any(secMethodOrPromises);
            success = true;
            context.req['user'] = user;
        }
        catch(err) {
            // Show most recent error as response
            const error = failedAttempts.pop();
            context.status = error.status || 401;
            throw new HTTPException(context.status as number, { message:  error.message });
        }

        if (success) {
            return next();
        }

        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    }
}
{{/if}}
